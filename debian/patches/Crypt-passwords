Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 astmanproxy (1.26-3) unstable; urgency=low
 .
   * Attempt to understand Crypt'ed passwords
Author: root <steved@ipcortex.co.uk>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

Index: astmanproxy-1.26/Makefile
===================================================================
--- astmanproxy-1.26.orig/Makefile	2014-10-28 16:40:55.000000000 +0000
+++ astmanproxy-1.26/Makefile	2014-10-28 16:40:55.000000000 +0000
@@ -24,7 +24,7 @@
 MODS := astmanproxy config config_perms common proxyfunc log ssl md5
 HANDLERS := xml standard csv http
 SOBJS := $(HANDLERS:%=%.so)
-LIBS := -lssl
+LIBS := -lssl -lcrypt
 
 # Add -g below for debug/GDB symbols
 CFLAGS:=-Wall -O2 -D_REENTRANT -D_GNU_SOURCE -fPIC
Index: astmanproxy-1.26/src/proxyfunc.c
===================================================================
--- astmanproxy-1.26.orig/src/proxyfunc.c	2014-10-28 16:40:55.000000000 +0000
+++ astmanproxy-1.26/src/proxyfunc.c	2014-10-28 16:40:55.000000000 +0000
@@ -10,6 +10,8 @@
 
 #include "astmanproxy.h"
 #include "md5.h"
+#include <unistd.h>
+#include <crypt.h>
 
 extern struct mansession *sessions;
 extern struct iohandler *iohandlers;
@@ -131,6 +133,13 @@
 	return 0;
 }
 
+int AuthCrypt(char *pass, char *hash) {
+	if (!strcmp(crypt(pass, hash), hash))
+		return 0;
+	else
+		return 1;
+}
+
 int AuthMD5(char *key, char *challenge, char *password) {
 	int x;
 	int len=0;
@@ -154,9 +163,9 @@
 		debugmsg("MD5 computed=%s, received=%s", md5key, key);
 	}
 	if (!strcmp(md5key, key))
-	return 0;
+		return 0;
 	else
-	return 1;
+		return 1;
 }
 
 void *ProxyLogin(struct mansession *s, struct message *m) {
@@ -179,24 +188,28 @@
 	pu = pc.userlist;
 	while( pu ) {
 		if ( !strcmp(user, pu->username) ) {
-			if (!AuthMD5(key, s->challenge, pu->secret) || !strcmp(secret, pu->secret) ) {
-				AddHeader(&mo, "Response: Success");
-				AddHeader(&mo, "Message: Authentication accepted");
-				s->output->write(s, &mo);
-				pthread_mutex_lock(&s->lock);
-				s->authenticated = 1;
-				strcpy(s->user.channel, pu->channel);
-				strcpy(s->user.icontext, pu->icontext);
-				strcpy(s->user.ocontext, pu->ocontext);
-				strcpy(s->user.account, pu->account);
-				strcpy(s->user.server, pu->server);
-				strcpy(s->user.more_events, pu->more_events);
-				s->user.filter_bits = pu->filter_bits;
-				pthread_mutex_unlock(&s->lock);
-				if( debug )
-					debugmsg("Login as: %s", user);
-				break;
-			}
+			if (pu->secret[0] == '$') {
+				if (AuthCrypt(secret, pu->secret))
+					continue;
+			} else if (AuthMD5(key, s->challenge, pu->secret) && strcmp(secret, pu->secret) )
+				continue;
+
+			AddHeader(&mo, "Response: Success");
+			AddHeader(&mo, "Message: Authentication accepted");
+			s->output->write(s, &mo);
+			pthread_mutex_lock(&s->lock);
+			s->authenticated = 1;
+			strcpy(s->user.channel, pu->channel);
+			strcpy(s->user.icontext, pu->icontext);
+			strcpy(s->user.ocontext, pu->ocontext);
+			strcpy(s->user.account, pu->account);
+			strcpy(s->user.server, pu->server);
+			strcpy(s->user.more_events, pu->more_events);
+			s->user.filter_bits = pu->filter_bits;
+			pthread_mutex_unlock(&s->lock);
+			if( debug )
+				debugmsg("Login as: %s", user);
+			break;
 		}
 		pu = pu->next;
 	}
